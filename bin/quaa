#!/bin/bash
repo_root=$(dirname $(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd))

set -eu

project_root=${UAADEPLOY_PROJECT_ROOT:-${repo_root}}
state=${UAADEPLOY_STATE_ROOT:-${project_root}/state}
cache=${state}/cache
vars_file=${UAADEPLOY_VARS_FILE:-${project_root}/vars.yml}
vars_store=${UAADEPLOY_VARS_STORE:-${state}/creds.yml}
war_downloads=~/.uaa/server/downloads

vars_store_arg="--vars-store ${vars_store}"

mkdir -p ${state}
mkdir -p ${cache}
tmp=$(mktemp -d)
trap "rm -fr ${tmp}" EXIT
trap "[[ -s $vars_file ]] || { rm -f $vars_file; }" EXIT
var_cache="${tmp}/vars_cache.yml"

uaa_yml_base="${repo_root}/manifests/uaa.yml"

PATH=${repo_root}/bin:${PATH}

version=$(grep quaa ${repo_root}/.versions | cut -d= -f2)

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

platform() {
    if [ "$(uname)" == "Darwin" ]; then
        echo "darwin"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "linux"
    fi
}

faketty() {
    case $(platform) in
        darwin)
            script -q /dev/null "$@"
            ;;
        linux)
            script -qfc "$(printf "%q " "$@")" /dev/null
            ;;
    esac
}

validate_vars_file() {
    if [ ! -e $vars_file ]; then
      eval "echo \"$(<manifests/vars.tmpl)\"" > $vars_file
    fi
}

local_db_vars_file() {
    if [[ ! -f ${cache}/local_db_vars_file.yml ]]; then
        cat > ${cache}/local_db_vars_file.yml <<-YAML
db_scheme: postgresql
db_username: $(whoami)
db_password: ""
db_host: localhost
db_port: 5432
db_name: quick-uaa-local
YAML
    fi
    echo "${cache}/local_db_vars_file.yml"
}

vars_file() {
    local state_vars=${state}/vars.yml
    bosh int $vars_file > $state_vars
    echo $state_vars
}

ca_cert() {
    local tmp=$(mktemp -d) # temp fix for https://github.com/cloudfoundry/cf-uaac/issues/60
    local ca_cert_file="${tmp}/ca.pem"
    store_uaa_int --path /default_ca/ca > $ca_cert_file
    echo $ca_cert_file
}

appname() {
  echo "uaa"
}

dbname() {
  echo "uaa-db"
}

usage() {
    echo "UAA Deployment CLI v${version:-(development)}"
    echo "  up -- deploys the UAA to Cloud Foundry"
    echo "  down -- deletes the UAA app from Cloud Foundry"
    echo "  clean -- start with a clean enviorment - use this only after you've torn down your env"
    echo "  ssh -- ssh into the UAA app instance"
    echo "  logs -- streaming logs from UAA app instance; pass --recent to see recent logs"
    echo "  env -- sourceable environment variables for cli clients"
    echo "  uaayml -- build UAA yaml configuration"
    echo "  cfyml  -- build Cloud Foundry deployment manifest"
    echo "  info -- UAA information"
    echo "  auth-client -- configures uaa cli as a client only"
    exit 1
}

up_usage() {
    echo "  --port 8080 | Local port to bind UAA"
    echo
}

down_usage() {
    echo "  -f |          Force deletion without confirmation"
    echo "  -c | --clean  Cleans up your enviroment by removing state files"
    echo
}

up() {
    (>&2 echo "Discover local DB...")
    local_db_vars_file > /dev/null

    (>&2 echo)
    (>&2 echo "Check construction of UAA configuration...")
    uaa_int --var-errs > /dev/null

    (>&2 echo)
    (>&2 echo "Check custom build of UAA...")
    build_custom_war

    (>&2 echo)
}

down() {
    if [ ! -e $vars_file ]; then
      echo "please deploy the UAA first with 'u up'"
      exit 1
    fi
    echo "TODO"; exit 1
}

clean() {
  if curl -m 3 -H 'Accept: application/json' -k -s "$(public_url)/login" | grep version &>/dev/null ; then
    echo "Your UAA enviroment is still running, please tear it down with 'u down --clean'"
    exit 1
  fi
  rm -rf ${state}
  mv ${vars_file} ${vars_file}.bck
  echo "'state' dir has been cleaned and 'vars.yml' has been moved to 'vars.yml.bck'"
}

vars() {
    cat $(vars_file)
}

get_var() {
    path=$1
    if [[ ! -s ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    bosh int ${var_cache} --path "/$path"
}

public_url() {
    echo "https://$(get_var route)"
}

env() {
    echo "export PATH=\"${PATH}\""
    if [[ ! -f ${vars_store} ]]; then
        exit 0
    fi
    echo "export UAA_URL=$(public_url)"
    echo "export UAA_CA_CERT='$(cat $(ca_cert))'"
    echo "export UAA_CA_CERT_FILE='$(ca_cert)'"
}

info() {
    echo "UAA:"
    echo "  url: $(public_url)"
    echo "  client: uaa_admin"
    echo "  client_secret: $(store_uaa_int --path /admin_client_secret)"
    echo "  username: admin"
    echo "  password: $(store_uaa_int --path /admin_user_password)"
}

_ssh() {
    echo "TODO"; exit 1
}

_logs() {
    echo "TODO"; exit 1
}

_uaa_auth_client() {
    faketty uaa target $(public_url) "$@"
    faketty uaa get-client-credentials-token uaa_admin --client_secret $(store_uaa_int --path /admin_client_secret) "$@"
}

war_path() {
    local version=$(grep "^uaa-server=" ${repo_root}/.versions | cut -d= -f2)
    custom_build_name=custom
    # [[ -f ${project_root}/vars.yml ]] && {
    #     custom_build_name=$(bosh int ${project_root}/vars.yml --path /buildname | sed -e "s%\.%-%g");
    # }

    # Possibly produced by bin/customize-uaa-war
    local custom_war_path=${war_downloads}/uaa-${version}-${custom_build_name}.war
    [[ -f ${custom_war_path} ]] && { echo ${custom_war_path}; exit 0; }

    local war_path=${war_downloads}/uaa-${version}.war

    mkdir -p $(dirname ${war_path})
    if [[ ! -f ${war_path} ]]; then
      (>&2 echo "downloading uaa '${version}' into: ~/.uaa/server/downloads/")
      local url=https://github.com/starkandwayne/uaa-war-releases/releases/download/v${version}/cloudfoundry-identity-uaa-${version}.war
      curl -s -L -o ${war_path} ${url}
    fi
    echo ${war_path}
}

build_custom_war() {
    set +e
    customize-uaa-war test && {
        customize-uaa-war build
    }
    set -e
}

clear_cache() {
    rm -rf ${cache}
}

uaa_int_args() {
    local ops_files=()

    vars_file_arg="-l $(vars_file) -l $(local_db_vars_file)"

    # Database selection from service instance
    ops_files+=(${repo_root}/manifests/ops-files/db/1-$(cat $(local_db_vars_file) | bosh int - --path /db_scheme).yml)

    if [[ -d ${project_root}/operators/uaa ]]; then
        ops_files+=(${project_root}/operators/uaa/*.yml)
    fi

    ops_file_args=$(printf '%s\n' "${ops_files[@]}" | sed 's|\(.*\)/|\1@|' | sort -t@ -k2 | sed 's|@|/|' | sed 's/^/-o /' | xargs)
    echo "${uaa_yml_base} ${ops_file_args} ${vars_store_arg} ${vars_file_arg}"
}

uaa_int() {
    local_db_vars_file > /dev/null
    bosh int $(uaa_int_args) "$@"
}

store_uaa_int() {
    bosh int $vars_store "$@"
}

_ensure_bosh_cli_installed() {
    local url="https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli"
    local version=$(grep "^bosh=" ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/bosh

    if ! ( [ -f ${cli_path} ] && ${cli_path} --version | head -n 1 | grep ${version} > /dev/null); then

      (>&2 echo "installing bosh cli '${version}' into: ${repo_root}/bin/")
      pushd $(mktemp -d)
      if [ "$(platform)" == "darwin" ]; then
          curl -s -L >bosh "${url}-${version}-darwin-amd64"
          chmod +x bosh
          mv bosh ${repo_root}/bin/
      else
          curl -s -L >bosh "${url}-${version}-linux-amd64"
          chmod +x bosh
          mv bosh ${repo_root}/bin/
      fi
      popd
    fi
}

_ensure_uaa_cli_installed() {
    local url="https://github.com/starkandwayne/uaa-cli-releases/releases/download"
    local version=$(grep "^uaa-cli=" ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/uaa

    if ! ( [ -f ${cli_path} ] && ${cli_path} version | head -n 1 | grep ${version} > /dev/null); then
      (>&2 echo "installing uaa cli '${version}' into: ${repo_root}/bin/")
      pushd $(mktemp -d)
      curl -s -L >uaa "${url}/v${version}/uaa-$(platform)-amd64"
      chmod +x uaa
      mv uaa ${repo_root}/bin/
      popd
    fi
}

_ensure_bosh_cli_installed
_ensure_uaa_cli_installed
case "${1:-usage}" in
    up)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    up_usage
                    exit 0
                    ;;
                --port)
                    shift
                    port=$1 # used in src/vars.tmpl
                    ;;
            esac
            shift
        done
        validate_vars_file

        up
        ;;

    down)
        shift
        case "${1:-}" in
            -h|--help|help)
                down_usage
                exit 0
                ;;
            -c|--clean|clean)
                shift
                down "$@"
                clean
                exit 0
                ;;
        esac
        down "$@"
        ;;

    clean)
        shift
        clean "$@"
        ;;

    env)
        shift
        env "$@"
        ;;

    vars)
        shift
        vars "$@"
        ;;

    info)
        shift
        info "$@"
        ;;

    auth-client)
        _uaa_auth_client "$@"
        ;;

    ssh)
        shift
        _ssh "$@"
        ;;

    logs)
        shift
        _logs "$@"
        ;;

    int)
        shift
        uaa_int "$@"
        ;;

    *)
        usage
        exit 1
        ;;
esac

#!/bin/bash
repo_root=$(dirname $(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd))

set -eu

project_root=${UAADEPLOY_PROJECT_ROOT:-${repo_root}}
state=${UAADEPLOY_STATE_ROOT:-${project_root}/state}
cache=${state}/cache
vars_file=${UAADEPLOY_VARS_FILE:-${project_root}/vars.yml}
vars_store=${UAADEPLOY_VARS_STORE:-${state}/creds.yml}
war_downloads=~/.uaa/server/downloads
uaa_config_path=${cache}/uaa

bosh_bin=${BOSH_BIN:-${repo_root}/bin/bosh}
uaa_bin=${UAA_BIN:-${repo_root}/bin/uaa}
catalina_bin=${CATALINA_BIN:-${repo_root}/libexec/bin/catalina.sh}

vars_store_arg="--vars-store ${vars_store}"


mkdir -p ${state}
mkdir -p ${cache}
mkdir -p ${uaa_config_path}
tmp=$(mktemp -d)
trap "rm -fr ${tmp}" EXIT
trap "[[ -s $vars_file ]] || { rm -f $vars_file; }" EXIT
var_cache="${tmp}/vars_cache.yml"

uaa_yml_base="${repo_root}/manifests/uaa.yml"

PATH=${repo_root}/bin:${PATH}

version=$(grep quaa ${repo_root}/.versions | cut -d= -f2)

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

platform() {
    if [ "$(uname)" == "Darwin" ]; then
        echo "darwin"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "linux"
    fi
}

faketty() {
    case $(platform) in
        darwin)
            script -q /dev/null "$@"
            ;;
        linux)
            script -qfc "$(printf "%q " "$@")" /dev/null
            ;;
    esac
}

validate_vars_file() {
    if [ ! -e $vars_file ]; then
      cat >> $vars_file <<-YAML
route: "localhost:${uaa_port:-8080}"
db_scheme: ${db_scheme:-postgresql}
db_username: "${db_username:-$(whoami)}"
db_host: "${db_host:-localhost}"
db_port: ${db_port:-5432}
db_name: "${db_name:-quick-uaa-local}"
YAML
    fi
}

public_url() {
    uaa_int --path /issuer/uri
}

db_uri_no_dbname() {
    echo "$(get_var db_scheme)://$(get_var db_username):@$(get_var db_host):$(get_var db_port)"
}

db_uri() {
    echo "$(db_uri_no_dbname)/$(get_var db_name)"
}

check_local_postgresql() {
    if [[ "${db_scheme:-postgresql}" == "postgresql" ]]; then
        set +e
        testoutput=$(psql -c "\dd;" $(db_uri) 2>&1)
        if [[ "X$(echo ${testoutput} | grep 'Is the server running')" != "X" ]]; then
            (>&2 echo "ERROR: cannot connect to PostgreSQL: $(db_uri)")
            exit 1
        fi
        set -e
        if [[ "X$(echo ${testoutput} | grep 'does not exist')" != "X" ]]; then
            (>&2 echo "Creating PostgreSQL database: $(db_uri)")
            createdb -h $(get_var db_host) -p $(get_var db_port) -U $(get_var db_username) $(get_var db_name)
        fi
    fi
}

local_db_vars_file() {
    if [[ ! -f ${cache}/local_db_vars_file.yml ]]; then
        check_local_postgresql
        cat > ${cache}/local_db_vars_file.yml <<-YAML
db_scheme: $(get_var db_scheme)
db_username: $(get_var db_username)
db_password: ""
db_host: $(get_var db_host)
db_port: $(get_var db_port)
db_name: $(get_var db_name)
YAML
    fi
    echo "${cache}/local_db_vars_file.yml"
}

vars_file() {
    local state_vars=${state}/vars.yml
    ${bosh_bin} int $vars_file > $state_vars
    echo $state_vars
}

ca_cert() {
    local tmp=$(mktemp -d) # temp fix for https://github.com/cloudfoundry/cf-uaac/issues/60
    local ca_cert_file="${tmp}/ca.pem"
    store_uaa_int --path /default_ca/ca > $ca_cert_file
    echo $ca_cert_file
}

usage() {
    echo "UAA Deployment CLI v${version:-(development)}"
    echo "  up -- runs the UAA within a dedicated Apache Tomcat"
    echo "  info -- UAA information"
    echo "  auth-client -- configures uaa cli as a client only"
    echo "  clean -- start with a clean enviorment"
    echo "  logs -- tail logs from UAA"
    echo "  env -- sourceable environment variables for cli clients"
    echo "  int -- build UAA yaml configuration"
    exit 1
}

up_usage() {
    echo "  --port 8080               | Local HTTP port to access UAA"
    echo "  --in-memory, --memory     | Force use no database (default if no database discovered)"
    echo "  --postgresql              | Force use postgresql (default if postgresql discovered)"
    echo "  --db-port 5432            | Connect to database on port"
    echo "  --db-name quick-uaa-local | Connect to database name (created if missing)"
    echo "  --db-username $(whoami) | Connect to database with username (no password)"
    echo
}

catalina_base() {
    ${catalina_bin} -h | grep CATALINA_BASE | awk '{print $3}'
}

up() {
    _ensure_java8_installed
    _ensure_tomcat_installed

    (>&2 echo "Discover local DB...")
    local_db_vars_file > /dev/null

    (>&2 echo)
    (>&2 echo "Configuring UAA...")
    mkdir -p ${project_root}/operators
    cp ${repo_root}/manifests/ops-files/3-http-only.yml ${project_root}/operators/3-http-only.yml

    uaa_int --var-errs > "${uaa_config_path}/uaa.yml"

    # (>&2 echo)
    # (>&2 echo "Check custom build of UAA...")
    # build_custom_war

    (>&2 echo)
    (>&2 echo "Deploying UAA to Apache Tomcat...")
    export UAA_URL=$(public_url)
    export LOGIN_URL=$(public_url)
    export JBP_CONFIG_SPRING_AUTO_RECONFIGURATION='{enabled: true}'
    export CLOUD_FOUNDRY_CONFIG_PATH=${uaa_config_path}
    export CATALINA_OPTS="-Djava.security.policy=unlimited -Xmx768m -XX:MaxMetaspaceSize=256m"

    rm -rf $(catalina_base)/logs/uaa.log
    rm -rf $(catalina_base)/webapps
    mkdir -p $(catalina_base)/webapps
    cp $(war_path) $(catalina_base)/webapps/ROOT.war
    cp ${repo_root}/manifests/tomcat/server.http-only.xml $(catalina_base)/conf/server.xml

    cat > ${uaa_config_path}/uaa.crt <<-CERT

CERT

    [[ "${NO_START:-X}" == "X" ]] && { ${catalina_bin} run; } || { echo "No start."; }
}

clean() {
    if [[ -f ${vars_file} ]]; then
        if curl -m 3 -H 'Accept: application/json' -k -s "$(public_url)/login" | grep version &>/dev/null ; then
            echo "Your UAA enviroment is still running"
            exit 1
        fi
        mv ${vars_file} ${vars_file}.bck
    fi
    rm -rf ${state}
    echo "'state' dir has been cleaned and 'vars.yml' has been moved to 'vars.yml.bck'"
}

vars() {
    cat $(vars_file)
}

get_var() {
    path=$1
    if [[ ! -s ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    ${bosh_bin} int ${var_cache} --path "/$path"
}

_env() {
    echo "export PATH=\"${PATH}\""
    if [[ ! -f ${vars_store} ]]; then
        exit 0
    fi
    echo "export UAA_URL=$(public_url)"
    echo "export UAA_CA_CERT='$(cat $(ca_cert))'"
    echo "export UAA_CA_CERT_FILE='$(ca_cert)'"
}

info() {
    echo "UAA:"
    echo "  url: $(public_url)"
    echo "  client: uaa_admin"
    echo "  client_secret: $(store_uaa_int --path /admin_client_secret)"
    echo "  username: admin"
    echo "  password: $(store_uaa_int --path /admin_user_password)"
}

_logs() {
     tail -n 200 -f $(catalina_base)/logs/uaa.log
}

_uaa_auth_client() {
    _ensure_uaa_cli_installed
    faketty ${uaa_bin} target $(public_url) "$@"
    faketty ${uaa_bin} get-client-credentials-token uaa_admin --client_secret $(store_uaa_int --path /admin_client_secret) "$@"
}

war_path() {
    local version=$(grep "^uaa-server=" ${repo_root}/.versions | cut -d= -f2)
    custom_build_name=custom
    # [[ -f ${project_root}/vars.yml ]] && {
    #     custom_build_name=$(${bosh_bin} int ${project_root}/vars.yml --path /buildname | sed -e "s%\.%-%g");
    # }

    # Possibly produced by bin/customize-uaa-war
    local custom_war_path=${war_downloads}/uaa-${version}-${custom_build_name}.war
    [[ -f ${custom_war_path} ]] && { echo ${custom_war_path}; exit 0; }

    local war_path=${war_downloads}/uaa-${version}.war

    mkdir -p $(dirname ${war_path})
    if [[ ! -f ${war_path} ]]; then
      (>&2 echo "downloading uaa '${version}' into: ~/.uaa/server/downloads/")
      local url=https://github.com/starkandwayne/uaa-war-releases/releases/download/v${version}/cloudfoundry-identity-uaa-${version}.war
      curl -s -L -o ${war_path} ${url}
    fi
    echo ${war_path}
}

build_custom_war() {
    set +e
    customize-uaa-war test && {
        customize-uaa-war build
    }
    set -e
}

clear_cache() {
    rm -rf ${cache}
}

uaa_int_args() {
    local ops_files=()

    vars_file_arg="-l $(vars_file) -l $(local_db_vars_file)"

    # Database selection from service instance
    ops_files+=(${repo_root}/manifests/ops-files/db/1-$(cat $(local_db_vars_file) | ${bosh_bin} int - --path /db_scheme).yml)

    if [[ -d ${project_root}/operators ]]; then
        ops_files+=(${project_root}/operators/*.yml)
    fi

    ops_file_args=$(printf '%s\n' "${ops_files[@]}" | sed 's|\(.*\)/|\1@|' | sort -t@ -k2 | sed 's|@|/|' | sed 's/^/-o /' | xargs)
    echo "${uaa_yml_base} ${ops_file_args} ${vars_store_arg} ${vars_file_arg}"
}

uaa_int() {
    local_db_vars_file > /dev/null
    ${bosh_bin} int $(uaa_int_args) "$@"
}

store_uaa_int() {
    ${bosh_bin} int $vars_store "$@"
}

_ensure_bosh_cli_installed() {
    local url="https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli"
    local version=$(grep "^bosh=" ${repo_root}/.versions | cut -d= -f2)

    [[ "${OPTIONAL_CLI_INSTALL:-X}" != "X" && "$(which bosh)X" != "X" ]] && { exit 0; }

    if ! ( [ -f ${bosh_bin} ] && ${bosh_bin} --version | head -n 1 | grep ${version} > /dev/null); then
      (>&2 echo "INFO: the bosh cli is used to generate random certificates/passwords for the UAA configuration files")
      (>&2 echo "installing bosh cli '${version}' into: ${repo_root}/bin/")
      pushd $(mktemp -d)
      if [ "$(platform)" == "darwin" ]; then
          curl -s -L >bosh "${url}-${version}-darwin-amd64"
          chmod +x bosh
          mv bosh ${repo_root}/bin/
      else
          curl -s -L >bosh "${url}-${version}-linux-amd64"
          chmod +x bosh
          mv bosh ${repo_root}/bin/
      fi
      popd
    fi
}

_ensure_uaa_cli_installed() {
    local url="https://github.com/starkandwayne/uaa-cli-releases/releases/download"
    local version=$(grep "^uaa-cli=" ${repo_root}/.versions | cut -d= -f2)

    [[ "${OPTIONAL_CLI_INSTALL:-X}" != "X" && "$(which uaa)X" != "X" ]] && { exit 0; }

    if ! ( [ -f ${uaa_bin} ] && ${uaa_bin} version | head -n 1 | grep ${version} > /dev/null); then
      (>&2 echo "installing uaa cli '${version}' into: ${repo_root}/bin/")
      pushd $(mktemp -d)
      curl -s -L >uaa "${url}/v${version}/uaa-$(platform)-amd64"
      chmod +x uaa
      mv uaa ${repo_root}/bin/
      popd
    fi
}

_ensure_tomcat_installed() {
    local version=$(grep "^tomcat=" ${repo_root}/.versions | cut -d= -f2)
    local url="http://www-eu.apache.org/dist/tomcat/tomcat-9/v${version}/bin/apache-tomcat-${version}.tar.gz"

    [[ "${OPTIONAL_CLI_INSTALL:-X}" != "X" && "$(which catalina)X" != "X" ]] && { exit 0; }
    if ! ( [ -f ${catalina_bin} ] && ${catalina_bin} version | grep "Server number: *${version}" > /dev/null); then
      (>&2 echo "Installing Apache Tomcat '${version}' into: ${repo_root}/libexec/")
      pushd $(mktemp -d)
      if [[ "${TOMCAT_TGZ_PATH:-X}" == "X" ]]; then
        (>&2 echo "  from ${url}...")
        curl -sLO ${url}
      else
        (>&2 echo "  from ${TOMCAT_TGZ_PATH}...")
        cp ${TOMCAT_TGZ_PATH} apache-tomcat-${version}.tar.gz
      fi
      tar xfz apache-tomcat-${version}.tar.gz

      rm -rf ${repo_root}/libexec
      if [[ -d apache-tomcat-${version} ]]; then
        cp -r apache-tomcat-${version} ${repo_root}/libexec
      elif [[ -d META-INF ]]; then
        mkdir -p ${repo_root}/libexec
        cp -r META-INF WEB-INF resources vendor ${repo_root}/libexec/
      else
        (>&2 echo "Does not appear to be Apache Tomcat.")
        ls -al
        exit 1
      fi
      popd
    fi
}

# Tomcat seems to fail on OpenJDK 9 + 10. Restrict to 8.
_ensure_java8_installed() {
    [[ "$(which java)X" == "X" ]] && {
        (>&2 echo "ERROR: Apache Tomcat 9 requires Java 8. Please install Java 8")
        exit 1
    }
    [[ "$(java -version 2>&1 | grep 'java version "1.8')X" == "X" ]] && {
        (>&2 echo "ERROR: Apache Tomcat 9 seems to require Java 8. Please switch to Java 8 :/")
        exit 1
    }
    true
}

_ensure_bosh_cli_installed
# IDEA: allow `uaa` subcommands to be passed thru
# uaa -h | grep -v : | grep -v "\-\-" | grep "^  [a-z][a-z-]*  *[A-Z]" | awk '{print $1}'
case "${1:-usage}" in
    up)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    up_usage
                    exit 0
                    ;;
                --clean)
                    clean
                    mkdir -p ${state}
                    mkdir -p ${cache}
                    mkdir -p ${uaa_config_path}
                    ;;
                --port)
                    shift
                    uaa_port=$1
                    ;;
                --postgresql)
                    db_scheme=postgresql
                    ;;
                --in-memory)
                    db_scheme=memory
                    ;;
                --memory)
                    db_scheme=memory
                    ;;
                --db-port)
                    shift
                    db_port=$1
                    ;;
                --db-name)
                    shift
                    db_name=$1
                    ;;
                --db-username)
                    shift
                    db_username=$1
                    ;;
            esac
            shift
        done
        validate_vars_file

        up
        ;;

    clean)
        shift
        clean "$@"
        ;;

    env)
        shift
        _env "$@"
        ;;

    vars)
        shift
        vars "$@"
        ;;

    info)
        shift
        info "$@"
        ;;

    auth-client)
        _uaa_auth_client "$@"
        ;;

    logs)
        shift
        _logs "$@"
        ;;

    int)
        shift
        uaa_int "$@"
        ;;

    war_path)
        war_path
        ;;

    *)
        usage
        exit 1
        ;;
esac

